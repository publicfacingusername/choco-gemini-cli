<?xml version="1.0" encoding="utf-8"?>
<!-- Do not remove this test for UTF-8: if “Ω” doesn’t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
  <metadata>
    <id>gemini-cli</id>
    <version>0.1.16</version>
    <packageSourceUrl>https://github.com/publicfacingusername/choco-gemini-cli</packageSourceUrl>
    <owners>publicfacingusername</owners>
    <title>Gemini CLI</title>
    <authors>Google</authors>
    <projectUrl>https://github.com/google-gemini/gemini-cli</projectUrl>
    <iconUrl>https://cdn.jsdelivr.net/gh/publicfacingusername/choco-gemini-cli@[replace_this]/gemini_logo_scaled.svg</iconUrl>
    <licenseUrl>https://github.com/google-gemini/gemini-cli/blob/main/LICENSE</licenseUrl>
    <projectSourceUrl>https://github.com/google-gemini/gemini-cli</projectSourceUrl>
    <docsUrl>https://gemini-cli-docs.pages.dev/en/</docsUrl>
    <tags>google gemini cli ai llm</tags>
    <summary>Gemini CLI is a command-line AI workflow tool that connects to your tools, understands your code, and accelerates your workflows. Gemini CLI brings the capabilities of Gemini models to your terminal in an interactive Read-Eval-Print Loop (REPL) environment.</summary>
    <dependencies>
      <dependency id="nodejs-lts" version="[20.0.0,)" />
    </dependencies>
    <description>
# Gemini CLI


With the Gemini CLI you can:

- Query and edit large codebases in and beyond Gemini's 1M token context window.
- Generate new apps from PDFs or sketches, using Gemini's multimodal capabilities.
- Automate operational tasks, like querying pull requests or handling complex rebases.
- Use tools and MCP servers to connect new capabilities, including [media generation with Imagen,
  Veo or Lyria](https://github.com/GoogleCloudPlatform/vertex-ai-creative-studio/tree/main/experiments/mcp-genmedia)
- Ground your queries with the [Google Search](https://ai.google.dev/gemini-api/docs/grounding)
  tool, built into Gemini.

## Quickstart

Install Gemini CLI using Chocolatey by running:

```powershell
choco install gemini-cli
```

## Common Configuration steps

1. **Pick a color theme**

2. **Authenticate:** When prompted, sign in with your personal Google account. This will grant you up to 60 model requests per minute and 1,000 model requests per day using Gemini.

You are now ready to use the Gemini CLI!

### Use a Gemini API key:

The Gemini API provides a free tier with [100 requests per day](https://ai.google.dev/gemini-api/docs/rate-limits#free-tier) using Gemini 2.5 Pro, control over which model you use, and access to higher rate limits (with a paid plan):

1. Generate a key from [Google AI Studio](https://aistudio.google.com/apikey).
2. Set it as an environment variable in your terminal. Replace `YOUR_API_KEY` with your generated key.

   ```bash
   export GEMINI_API_KEY="YOUR_API_KEY"
   ```

3. (Optionally) Upgrade your Gemini API project to a paid plan on the API key page (will automatically unlock [Tier 1 rate limits](https://ai.google.dev/gemini-api/docs/rate-limits#tier-1))

### Use a Vertex AI API key:

The Vertex AI API provides a [free tier](https://cloud.google.com/vertex-ai/generative-ai/docs/start/express-mode/overview) using express mode for Gemini 2.5 Pro, control over which model you use, and access to higher rate limits with a billing account:

1. Generate a key from [Google Cloud](https://cloud.google.com/vertex-ai/generative-ai/docs/start/api-keys).
2. Set it as an environment variable in your terminal. Replace `YOUR_API_KEY` with your generated key and set GOOGLE_GENAI_USE_VERTEXAI to true

   ```bash
   export GOOGLE_API_KEY="YOUR_API_KEY"
   export GOOGLE_GENAI_USE_VERTEXAI=true
   ```

3. (Optionally) Add a billing account on your project to get access to [higher usage limits](https://cloud.google.com/vertex-ai/generative-ai/docs/quotas)

For other authentication methods, including Google Workspace accounts, see the [authentication](./docs/cli/authentication.md) guide.
</description>
  </metadata>
  <files>
    <file src="tools\**" target="tools" />
  </files>
</package>
